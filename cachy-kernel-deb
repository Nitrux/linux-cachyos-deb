#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2024> <Laio O. Seman <laio@iee.org>>                                                                                                                         #
#   Copyright <2024> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -eu


# -- Variables to set default options.

_kv_url=$(curl -s https://www.kernel.org | grep -A 1 'id="latest_link"' | awk 'NR==2' | grep -oP 'href="\K[^"]+')
_kv_name=$(basename "$_kv_url" .tar.xz)

_march="native"

_selected_kernel_config="linux-cachyos"

_base_patch_selection="cachyos-base-all"
_cpusched_selection="cachyos-default"

_llvm_lto_selection="none"
_tick_rate="500"
_tick_type="nohz_full"
_nr_cpus="32"
_hugepage="always"
_lru_config="standard"
_preempt="preempt"

_o3_optimization="yes"
_performance_governor="yes"
_vma="yes"
_damon="yes"
_numa="enable"

_custom_extraversion="-custom-kernel"


# -- Add colors for whiptail.

export NEWT_COLORS='
    root=white,blue
    border=black,lightgray
    window=black,lightgray
    shadow=black,gray
    title=black,lightgray
    button=black,cyan
    actbutton=white,blue
    checkbox=black,lightgray
    actcheckbox=black,cyan
    entry=black,lightgray
    label=black,lightgray
    listbox=black,lightgray
    actlistbox=black,cyan
    textbox=black,lightgray
    acttextbox=black,cyan
    helpline=white,blue
    roottext=black,lightgray
'


# -- Functions.

check_deps() {
    dependencies=(git libncurses-dev curl gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf llvm bc rsync whiptail)
    for dep in "${dependencies[@]}"; do
        dpkg -s "$dep" &>/dev/null || sudo apt install -y "$dep"
    done
}


check_gcc() {
    command -v gcc &>/dev/null || { echo "Error: GCC is not installed. Please install GCC and try again." >&2; exit 1; }
}


init_script() {
    check_gcc

    MARCH=$(gcc -Q -march=native --help=target | awk -F'=' '/^  -march=/ {print toupper($2); exit}' | xargs)

    case $MARCH in
        ZNVER1) MARCH="ZEN" ;;
        ZNVER2) MARCH="ZEN2" ;;
        ZNVER3) MARCH="ZEN3" ;;
        ZNVER4) MARCH="ZEN4" ;;
        BDVER1) MARCH="BULLDOZER" ;;
        BDVER2) MARCH="PILEDRIVER" ;;
        BDVER3) MARCH="STEAMROLLER" ;;
        BDVER4) MARCH="EXCAVATOR" ;;
        BTVER1) MARCH="BOBCAT" ;;
        BTVER2) MARCH="JAGUAR" ;;
        AMDFAM10) MARCH="MK10" ;;
        K8-SSE3) MARCH="K8SSE3" ;;
        BONNELL) MARCH="ATOM" ;;
        GOLDMONT-PLUS) MARCH="GOLDMONTPLUS" ;;
        SKYLAKE-AVX512) MARCH="SKYLAKEX" ;;
        MIVYBRIDGE)
            scripts/config --disable CONFIG_AGP_AMD64
            scripts/config --disable CONFIG_MICROCODE_AMD
            MARCH="MIVYBRIDGE"
            ;;
        ICELAKE-CLIENT) MARCH="ICELAKE" ;;
    esac

    MARCH2="M${MARCH}"

    if ! whiptail --title "CPU Architecture" --yesno "Detected CPU (MARCH) : ${MARCH2}\nIs this correct?" 10 60; then
        MARCH2=$(whiptail --title "CPU Architecture" --inputbox "Enter CPU type (MARCH):" 10 60 "$MARCH2" 3>&1 1>&2 2>&3)
    fi

    echo "----------------------------------"
    echo "| APPLYING AUTO-CPU-OPTIMIZATION |"
    echo "----------------------------------"
    echo "[*] DETECTED CPU (MARCH) : ${MARCH2}"

    _march=$MARCH2
}


kernel_configuration() {
    local options=(
        "linux-cachyos" "Use CachyOS BPF+BORE configuration" OFF
        "linux-cachyos-bore" "Use CachyOS BORE configuration" OFF
        "linux-cachyos-echo" "Use CachyOS ECHO configuration" OFF
        "linux-cachyos-eevdf" "Use CachyOS EEVDF configuration" OFF
        "linux-cachyos-hardened" "Use CachyOS RT configuration" OFF
        "linux-cachyos-rt-bore" "Use CachyOS BORE+RT configuration" OFF
        "linux-cachyos-sched-ext" "Use CachyOS BPF+SCHED-EXT configuration" OFF
    )

    local num_items=$(( ${#options[@]} / 3 ))

    local i=0
    while [ $i -lt $num_items ]; do
        if [[ "${options[i]}" == "$_selected_kernel_config" ]]; then
            options[i+2]="ON"
        fi
        i=$((i + 3))
    done

    local selection
    if ! selection=$(whiptail --title "Kernel Configuration" --radiolist \
        "Select kernel configuration:" 20 78 $num_items \
        "${options[@]}" 3>&1 1>&2 2>&3); then
        echo "Kernel configuration canceled or failed."
        _selected_kernel_config="none"
        return 1
    fi

    if [[ -n "$selection" ]]; then
        selection="${selection//\"/}"
        _selected_kernel_config="$selection"
        echo "Selected configurations: $selection"
    else
        echo "No configurations selected, defaulting to none."
        _selected_kernel_config="none"
    fi
}


configure_base_optmizations() {
    local cachyos_base_status
    local none_status

    cachyos_base_status=$( [ "$_base_patch_selection" = "cachyos-base-all" ] && echo "ON" || echo "OFF" )
    none_status=$( [ "$_base_patch_selection" = "none" ] && echo "ON" || echo "OFF" )

    _base_patch_selection=$(whiptail --title "Common Base Optimizations" --radiolist \
        "Enable base optimizations (use space to select):" 20 60 7 \
        "cachyos-base-all" "Use CachyOS optimizations" "$cachyos_base_status" \
        "none" "Do not apply optimizations" "$none_status" \
        3>&1 1>&2 2>&3)
}


configure_cpusched() {
    local cachyos_default_status
    local sched_echo_status
    local sched_echo_cachy_status
    local sched_bore_status
    local sched_bore_cachy_status
    local sched_bore_cachy_rt_status
    local none_status

    cachyos_default_status=$( [ "$_cpusched_selection" = "cachyos-default" ] && echo "ON" || echo "OFF" )
    sched_ext_status=$( [ "$_cpusched_selection" = "sched-ext" ] && echo "ON" || echo "OFF" )
    sched_echo_status=$( [ "$_cpusched_selection" = "echo" ] && echo "ON" || echo "OFF" )
    sched_echo_cachy_status=$( [ "$_cpusched_selection" = "echo-cachy" ] && echo "ON" || echo "OFF" )
    sched_bore_status=$( [ "$_cpusched_selection" = "bore" ] && echo "ON" || echo "OFF" )
    sched_bore_cachy_status=$( [ "$_cpusched_selection" = "bore-cachy" ] && echo "ON" || echo "OFF" )
    sched_bore_cachy_rt_status=$( [ "$_cpusched_selection" = "bore-cachy-rt" ] && echo "ON" || echo "OFF" )
    none_status=$( [ "$_cpusched_selection" = "none" ] && echo "ON" || echo "OFF" )

    _cpusched_selection=$(whiptail --title "CPU Scheduler Configuration" --radiolist \
        "Choose CPU Scheduler (use space to select):" 20 60 7 \
        "cachyos-default" "Use BORE+SCHED-EXT scheduler" "$cachyos_default_status" \
        "sched-ext" "Use SCHED-EXT scheduler" "$sched_ext_status" \
        "echo" "Use ECHO scheduler" "$sched_echo_status" \
        "echo-cachy" "Use ECHO+SCHED-EXT scheduler" "$sched_echo_cachy_status" \
        "bore" "Use BORE CPU scheduler" "$sched_bore_status" \
        "bore-cachy" "Use BORE+SCHED-EXT scheduler" "$sched_bore_cachy_status" \
        "bore-cachy-rt" "Use BORE+SCHED-EXT+RT scheduler" "$sched_bore_cachy_rt_status" \
        "none" "Do not configure CPU scheduler" "$none_status" \
        3>&1 1>&2 2>&3)
}


configure_llvm_lto() {
    local thin_status
    local full_status
    local none_status

    thin_status=$( [ "$_llvm_lto_selection" = "thin" ] && echo "ON" || echo "OFF" )
    full_status=$( [ "$_llvm_lto_selection" = "full" ] && echo "ON" || echo "OFF" )
    none_status=$( [ "$_llvm_lto_selection" = "none" ] && echo "ON" || echo "OFF" )

    _llvm_lto_selection=$(whiptail --title "LLVM LTO Configuration" --radiolist \
        "Choose LLVM LTO (use space to select):" 15 60 3 \
        "thin" "Use LLVM LTO Thin" "$thin_status" \
        "full" "Use LLVM LTO Full" "$full_status" \
        "none" "Do not configure LLVM LTO" "$none_status" \
        3>&1 1>&2 2>&3)
}


configure_tick_rate() {
    local tick_rate_100
    local tick_rate_250
    local tick_rate_500
    local tick_rate_600
    local tick_rate_750
    local tick_rate_1000

    tick_rate_100=$( [ "$_tick_rate" = "100" ] && echo "ON" || echo "OFF" )
    tick_rate_250=$( [ "$_tick_rate" = "250" ] && echo "ON" || echo "OFF" )
    tick_rate_500=$( [ "$_tick_rate" = "500" ] && echo "ON" || echo "OFF" )
    tick_rate_600=$( [ "$_tick_rate" = "600" ] && echo "ON" || echo "OFF" )
    tick_rate_750=$( [ "$_tick_rate" = "750" ] && echo "ON" || echo "OFF" )
    tick_rate_1000=$( [ "$_tick_rate" = "1000" ] && echo "ON" || echo "OFF" )

    _tick_rate=$(whiptail --title "Tick Rate Configuration" --radiolist \
        "Choose Tick Rate (use space to select):" 15 60 6 \
        "100" "100 Hz" "$tick_rate_100" \
        "250" "250 Hz" "$tick_rate_250" \
        "500" "500 Hz" "$tick_rate_500" \
        "600" "600 Hz" "$tick_rate_600" \
        "750" "750 Hz" "$tick_rate_750" \
        "1000" "1000 Hz" "$tick_rate_1000" \
        3>&1 1>&2 2>&3)
}


configure_tick_type() {
    local tick_type_periodic
    local tick_type_nohz_full
    local tick_type_nohz_idle

    tick_type_periodic=$( [ "$_tick_type" = "periodic" ] && echo "ON" || echo "OFF" )
    tick_type_nohz_full=$( [ "$_tick_type" = "nohz_full" ] && echo "ON" || echo "OFF" )
    tick_type_nohz_idle=$( [ "$_tick_type" = "nohz_idle" ] && echo "ON" || echo "OFF" )

    _tick_type=$(whiptail --title "Tick Type Configuration" --radiolist \
        "Choose Tick Type (use space to select):" 15 60 3 \
        "periodic" "Periodic tick" "$tick_type_periodic" \
        "nohz_full" "Full dynticks" "$tick_type_nohz_full" \
        "nohz_idle" "Idle dynticks" "$tick_type_nohz_idle" \
        3>&1 1>&2 2>&3)
}


configure_nr_cpus() {
    _nr_cpus=$(whiptail --title "NR_CPUS Configuration" --inputbox "Enter NR_CPUS value:" 10 60 "$_nr_cpus" 3>&1 1>&2 2>&3)
}


configure_hugepages() {
    local hugepage_always
    local hugepage_madvise
    local hugepage_no

    hugepage_always=$( [ "$_hugepage" = "always" ] && echo "ON" || echo "OFF" )
    hugepage_madvise=$( [ "$_hugepage" = "madvise" ] && echo "ON" || echo "OFF" )
    hugepage_no=$( [ "$_hugepage" = "no" ] && echo "ON" || echo "OFF" )

    _hugepage=$(whiptail --title "Hugepages Configuration" --radiolist \
        "Choose Hugepages (use space to select):" 15 60 3 \
        "always" "Always use hugepages" "$hugepage_always" \
        "madvise" "Use hugepages with madvise" "$hugepage_madvise" \
        "no" "Do not configure Hugepages" "$hugepage_no" \
        3>&1 1>&2 2>&3)
}


configure_lru() {
    local lru_standard
    local lru_stats
    local lru_none

    lru_standard=$( [ "$_lru_config" = "standard" ] && echo "ON" || echo "OFF" )
    lru_stats=$( [ "$_lru_config" = "stats" ] && echo "ON" || echo "OFF" )
    lru_none=$( [ "$_lru_config" = "none" ] && echo "ON" || echo "OFF" )

    _lru_config=$(whiptail --title "LRU Configuration" --radiolist \
        "Choose LRU (use space to select):" 15 60 3 \
        "standard" "Standard LRU" "$lru_standard" \
        "stats" "LRU with stats" "$lru_stats" \
        "none" "Do not configure LRU" "$lru_none" \
        3>&1 1>&2 2>&3)
}


configure_preempt_type() {
    local preempt_voluntary
    local preempt_preempt
    local preempt_rt
    local preempt_none

    preempt_voluntary=$( [ "$_preempt" = "voluntary" ] && echo "ON" || echo "OFF" )
    preempt_preempt=$( [ "$_preempt" = "preempt" ] && echo "ON" || echo "OFF" )
    preempt_rt=$( [ "$_preempt" = "rt" ] && echo "ON" || echo "OFF" )
    preempt_none=$( [ "$_preempt" = "none" ] && echo "ON" || echo "OFF" )

    _preempt=$(whiptail --title "Preempt Type Configuration" --radiolist \
        "Choose Preempt Type (use space to select):" 15 60 4 \
        "voluntary" "Voluntary Preemption" "$preempt_voluntary" \
        "preempt" "Preemptible Kernel (Low-Latency Desktop)" "$preempt_preempt" \
        "rt" "Real-Time Preemption" "$preempt_rt" \
        "none" "No Forced Preemption" "$preempt_none" \
        3>&1 1>&2 2>&3)

    case "$_preempt" in
        voluntary)
            _preempt="voluntary"
            ;;
        preempt)
            _preempt="preempt"
            ;;
        rt)
            _preempt="rt"
            ;;
        none)
            _preempt="none"
            ;;
    esac
}


configure_system_optimizations() {
    local o3_status
    local performance_status
    local vma_status
    local damon_status
    local numa_status

    o3_status=$([ "$_o3_optimization" = "yes" ] && echo "ON" || echo "OFF")
    performance_status=$([ "$_performance_governor" = "yes" ] && echo "ON" || echo "OFF")
    vma_status=$([ "$_vma" = "yes" ] && echo "ON" || echo "OFF")
    damon_status=$([ "$_damon" = "yes" ] && echo "ON" || echo "OFF")
    numa_status=$([ "$_numa" = "enable" ] && echo "ON" || echo "OFF")

    local selection
    selection=$(whiptail --title "System Optimizations Configuration" --checklist \
        "Select optimizations to enable:" 20 78 8 \
        "GCC -O3 Optimizations" "" "$o3_status" \
        "Enable Performance Governor" "" "$performance_status" \
        "Enable VMA Optimizations" "" "$vma_status" \
        "Enable DAMON" "" "$damon_status" \
        "Enable NUMA" "" "$numa_status" \
        3>&1 1>&2 2>&3)

    if [[ "$selection" == *"O3 Optimization"* ]]; then
        _o3_optimization="yes"
    fi

    _performance_governor=$( [[ "$selection" == *"Performance Governor"* ]] && echo "yes" || echo "no" )
    _vma=$( [[ "$selection" == *"VMA"* ]] && echo "yes" || echo "no" )
    _damon=$( [[ "$selection" == *"DAMON"* ]] && echo "yes" || echo "no" )
    _numa=$( [[ "$selection" == *"NUMA"* ]] && echo "enable" || echo "disable" )
}


apply_kernel_configuration() {
    echo "Starting kernel configuration process..."

    if ! wget -c "$_kv_url" -O "linux.tar.xz"; then
        echo "Failed to download the kernel archive."
        return 1
    fi

    tar -xf "linux.tar.xz"

    cd "$_kv_name" || { echo "Failed to enter the kernel directory."; return 1; }

    local _major
    local _mid
    _major=$(echo "$_kv_name" | grep -oP 'linux-\K\d+')
    _mid=$(echo "$_kv_name" | grep -oP 'linux-\d+\.\K\d+')

    if [[ -z "$_major" || -z "$_mid" ]]; then
        echo "Error extracting kernel version numbers."
        return 1
    fi

    local base_url="https://raw.githubusercontent.com/CachyOS/linux-cachyos/master"
    local config_suffix
    config_suffix="/${_selected_kernel_config}"

    if [[ "$_selected_kernel_config" == "linux-cachyos" ]]; then
        config_suffix="/linux-cachyos"
    fi

    local config_url="${base_url}${config_suffix}/config"
    echo "Config URL: $config_url"

    if ! wget -c "$config_url" -O .config; then
        echo "Failed to download the kernel configuration."
        return 1
    fi


    # -- Apply common CachyOS patch.

    local all_patch_base_url="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/${_major}.${_mid}/all/"

    case "$_base_patch_selection" in
        "cachyos-base-all") patch_files=("0001-cachyos-base-all.patch") ;;
        "none")
            echo "No base selected for patching."
            return 0
            ;;
        *)
            echo "Unknown base patch: $_base_patch_selection"
            return 1
            ;;
    esac

    for patch_file in "${patch_files[@]}"; do
        echo "Applying scheduler patch: $patch_file"
        if ! patch -p1 < <(wget -c "${all_patch_base_url}${patch_file}" -O -); then
            echo "Failed to download and apply the patch: $patch_file"
            whiptail --title "Patch Application Error" --msgbox "Failed to download or apply the patch: $patch_file" 10 60
            return 1
        fi
    done


    # -- Apply scheduler patches.

    local sched_patch_base_url="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/${_major}.${_mid}/sched/"
    local misc_patch_base_url="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/${_major}.${_mid}/misc/"
    local patch_files=()

    case "$_cpusched_selection" in
        "cachyos-default") patch_files=("0001-sched-ext.patch") ;;
        "sched-ext") patch_files=("0001-sched-ext.patch") ;;
        "echo") patch_files=("0001-echo.patch") ;;
        "echo-cachy") patch_files=("0001-echo-cachy.patch") ;;
        "bore") patch_files=("0001-bore.patch") ;;
        "bore-cachy") patch_files=("0001-bore-cachy.patch") ;;
        "bore-cachy-rt")
            patch_files=("0001-bore-cachy-rt.patch" "${misc_patch_base_url}0001-rt.patch")
            ;;
        "none")
            echo "No CPU scheduler selected for patching."
            return 0
            ;;
        *)
            echo "Unknown CPU scheduler: $_cpusched_selection"
            return 1
            ;;
    esac

    for patch_file in "${patch_files[@]}"; do
        echo "Applying scheduler patch: $patch_file"
        if ! patch -p1 < <(wget -c "${sched_patch_base_url}${patch_file}" -O -); then
            echo "Failed to download and apply the patch: $patch_file"
            whiptail --title "Patch Application Error" --msgbox "Failed to download or apply the patch: $patch_file" 10 60
            return 1
        fi
    done


    # -- Apply the user selections to the kernel configuration.

    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_"${_march^^}"

    case "$_cpusched_selection" in
        cachyos-default | bore-cachy)
            scripts/config -e SCHED_BORE -e SCHED_CLASS_EXT
            ;;
        sched-ext)
            scripts/config -e SCHED_CLASS_EXT
            ;;
        echo )
            scripts/config -e CONFIG_ECHO_SCHED
            ;;
        echo-cachy )
            scripts/config -e CONFIG_ECHO_SCHED -e SCHED_BORE -e SCHED_CLASS_EXT
            ;;
        bore )
            scripts/config -e SCHED_BORE
            ;;
        bore-cachy-rt)
            scripts/config -e SCHED_BORE -e SCHED_CLASS_EXT -e PREEMPT_COUNT -e PREEMPTION -d PREEMPT_VOLUNTARY -d PREEMPT -d PREEMPT_NONE -e PREEMPT_RT -d PREEMPT_DYNAMIC -d PREEMPT_BUILD
            ;;
    esac

    case "$_preempt" in
        preempt)
            scripts/config -e PREEMPT_BUILD -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -e PREEMPT -e PREEMPT_COUNT -e PREEMPTION -e PREEMPT_DYNAMIC
            ;;
        voluntary)
            scripts/config -e PREEMPT_BUILD -d PREEMPT_NONE -e PREEMPT_VOLUNTARY -d PREEMPT -e PREEMPT_COUNT -e PREEMPTION -d PREEMPT_DYNAMIC
            ;;
        server)
            scripts/config -e PREEMPT_NONE_BUILD -e PREEMPT_NONE -d PREEMPT_VOLUNTARY -d PREEMPT -d PREEMPTION -d PREEMPT_DYNAMIC
            ;;
        rt)
            scripts/config -e PREEMPT_BUILD -e PREEMPT_RT -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -d PREEMPT -e PREEMPT_COUNT -e PREEMPTION -d PREEMPT_DYNAMIC
            ;;
        none)
            ;;
    esac

    case "$_llvm_lto_selection" in
        thin)
            scripts/config -e LTO_CLANG_THIN
            ;;
        full)
            scripts/config -e LTO_CLANG_FULL
            ;;
        none)
            scripts/config -d LTO_CLANG_THIN -d LTO_CLANG_FULL
            ;;
    esac

    case "$_tick_rate" in
        100 | 250 | 300 | 500 | 600 | 750 | 1000)
            scripts/config -d HZ_100 -d HZ_250 -d HZ_500 -d HZ_600 -d HZ_750 -d HZ_1000
            scripts/config -e "HZ_${_tick_rate}" --set-val HZ "${_tick_rate}"
            ;;
    esac

    case "$_tick_type" in
        periodic)
            scripts/config -d NO_HZ_IDLE -d NO_HZ_FULL -d NO_HZ -d NO_HZ_COMMON -e HZ_PERIODIC
            ;;
        nohz_full)
            scripts/config -d HZ_PERIODIC -e NO_HZ_FULL -e NO_HZ -e NO_HZ_COMMON -e CONTEXT_TRACKING
            ;;
        nohz_idle)
            scripts/config -d HZ_PERIODIC -e NO_HZ_IDLE -e NO_HZ -e NO_HZ_COMMON
            ;;
    esac

    case "$_numa" in
        enable)
            scripts/config -e NUMA
            ;;
        disable)
            scripts/config -d NUMA
            ;;
        none)
            ;;
    esac

    case "$_hugepage" in
        always)
            scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE -e TRANSPARENT_HUGEPAGE_ALWAYS
            ;;
        madvise)
            scripts/config -d TRANSPARENT_HUGEPAGE_ALWAYS -e TRANSPARENT_HUGEPAGE_MADVISE
            ;;
        no)
            ;;
    esac

    scripts/config --set-val NR_CPUS "$_nr_cpus"

    case "$_lru_config" in
        standard)
            scripts/config -e LRU_GEN -e LRU_GEN_ENABLED -d LRU_GEN_STATS
            ;;
        stats)
            scripts/config -e LRU_GEN -e LRU_GEN_ENABLED -e LRU_GEN_STATS
            ;;
        none)
            scripts/config -d LRU_GEN
            ;;
    esac

    if [[ "$_o3_optimization" == "yes" ]]; then
        scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
    fi

    if [[ "$_performance_governor" == "yes" ]]; then
        scripts/config -d CPU_FREQ_DEFAULT_GOV_SCHEDUTIL -e CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    fi

    echo "Kernel configuration successfully applied."
    cd -
}


customize_kernel_extraname() {
    local new_suffix
    new_suffix=$(whiptail --inputbox "Enter suffix for kernel version:" 10 60 3>&1 1>&2 2>&3)

    if [[ -n $new_suffix ]]; then
        if [[ -d "$_kv_name" ]]; then
            echo "Updating EXTRAVERSION in Makefile..."
            cd "$_kv_name" || { 
                whiptail --title "Error" --msgbox "Failed to enter the kernel directory." 10 60
                return 1
            }

            if grep -q '^EXTRAVERSION =' Makefile; then
                echo "Current EXTRAVERSION: $(grep '^EXTRAVERSION =' Makefile)"
                if grep -q '^EXTRAVERSION = *$' Makefile; then
                    sed -i "s/^EXTRAVERSION = *$/EXTRAVERSION = -${new_suffix}/" Makefile
                else
                    sed -i "s/^EXTRAVERSION = .*/EXTRAVERSION = -${new_suffix}/" Makefile
                fi
            else
                echo "EXTRAVERSION not found in Makefile. Adding it..."
                echo "EXTRAVERSION = -${new_suffix}" >> Makefile
            fi

            echo "Updated EXTRAVERSION to: $(grep '^EXTRAVERSION =' Makefile)"
            echo "Kernel version updated to $(make kernelversion)."
            
            cd -
        else
            whiptail --title "Error" --msgbox "Directory '$_kv_name' does not exist." 10 60
        fi
    else
        echo "Operation canceled."
    fi
}


show_options() {
    local custom_extraversion
    custom_extraversion=$(grep -oP '^EXTRAVERSION = \K.*' "${_kv_name}/Makefile" || true)

    if [[ -z $custom_extraversion ]]; then
        custom_extraversion="$_custom_extraversion"
    fi

    custom_extraversion="${custom_extraversion#-}"

    local modified_kernel_version="${_kv_name}-${custom_extraversion}"

    whiptail --title "Configuration Summary" --msgbox "
    Available Kernel to Patch: $_kv_name

    CPU Architecture: $_march
    Selected Config: $_selected_kernel_config
    Base Patch: $_base_patch_selection
    CPU Scheduler: $_cpusched_selection
    LLVM LTO: $_llvm_lto_selection
    Tick Rate: $_tick_rate
    Tick Type: $_tick_type
    NR_CPUS: $_nr_cpus
    Hugepages: $_hugepage
    LRU Config: $_lru_config
    Preempt Type: $_preempt

    O3 Optimization: $_o3_optimization
    Performance Governor: $_performance_governor
    VMA: $_vma
    DAMON: $_damon
    NUMA: $_numa

    Custom Kernel Name: $modified_kernel_version
    " 30 78
}


create_debian_packages() {
    cd "$_kv_name" || return 1

    make -j"$(nproc)"

    modules_build_dir=$(mktemp -d)
    make INSTALL_MOD_STRIP=1 modules_install INSTALL_MOD_PATH="$modules_build_dir"

    find "$modules_build_dir" -type f -name '*.ko' -exec zstd -19 -f {} \;

    echo "Kernel modules have been optimized."

    local kernel_version arch
    kernel_version=$(make kernelversion)
    arch=$(dpkg --print-architecture)

    local kernel_pkg_name="linux-image-cachyos-${kernel_version}"
    kernel_pkg_version=$(date +%Y.%m.%d-%H.%M)
    local kernel_pkg_dir="${kernel_pkg_name}-${kernel_pkg_version}_${arch}"

    package_kernel() {
        local control_file="${kernel_pkg_dir}/DEBIAN/control"
        local kernel_postinst_file="${kernel_pkg_dir}/DEBIAN/postinst"
        local kernel_postrm_file="${kernel_pkg_dir}/DEBIAN/postrm"
        mkdir -p "${kernel_pkg_dir}/DEBIAN" \
                 "${kernel_pkg_dir}/boot" \
                 "${kernel_pkg_dir}/usr/lib/modules/${kernel_version}" \
                 "${kernel_pkg_dir}/usr/share/doc/${kernel_pkg_name}"

        cat >"${control_file}" <<EOF
Package: ${kernel_pkg_name}
Version: ${kernel_pkg_version}
Section: kernel
Priority: optional
Depends: initramfs-tools, libc6, kmod, linux-base
Architecture: ${arch}
Maintainer: Uri Herrera <uri_herrera@nxos.org>
Description: Linux Kernel ${kernel_version} with CachyOS patches
EOF

        cat >"${kernel_postinst_file}" <<EOF
#!/usr/bin/env bash

# -- Create initrd and update GRUB menu to add the new kernel.

update-initramfs -c -k ${kernel_version}
update-grub
EOF

        cat >"${kernel_postrm_file}" <<EOF
#!/usr/bin/env bash

# -- Remove generated initrd files.

find /boot -name "initrd.img-${kernel_version}" -exec rm -f {} \;
update-grub
EOF

        chmod 755 "${kernel_postinst_file}" "${kernel_postrm_file}"

        cp "arch/x86/boot/bzImage" "${kernel_pkg_dir}/boot/vmlinuz-${kernel_version}"
        cp -a "$modules_build_dir/lib/modules/${kernel_version}/"* "$(pwd)/${kernel_pkg_dir}/usr/lib/modules/${kernel_version}/"

        cp "System.map" "${kernel_pkg_dir}/boot/System.map-${kernel_version}"
        cp ".config" "${kernel_pkg_dir}/boot/config-${kernel_version}"

        fakeroot dpkg-deb -Zxz --build --root-owner-group "${kernel_pkg_dir}"

        mv -- *.deb ../

        rm -rf "${kernel_pkg_dir}" "$modules_build_dir"
    }

    local headers_pkg_name="linux-headers-cachyos-${kernel_version}"
    local headers_pkg_version="${kernel_pkg_version}"
    local headers_pkg_dir="${headers_pkg_name}-${headers_pkg_version}_${arch}"

    package_headers() {
        local control_file="${headers_pkg_dir}/DEBIAN/control"
        local headers_postinst_file="${headers_pkg_dir}/DEBIAN/postinst"
        mkdir -p "${headers_pkg_dir}/DEBIAN" \
                 "${headers_pkg_dir}/usr/src/linux-headers-${kernel_version}"

        cat >"${control_file}" <<EOF
Package: ${headers_pkg_name}
Version: ${headers_pkg_version}
Section: kernel
Priority: optional
Depends: ${kernel_pkg_name}
Architecture: ${arch}
Maintainer: Uri Herrera <uri_herrera@nxos.org>
Description: Headers for Linux Kernel ${kernel_version} with CachyOS patches
EOF

        cat >"${headers_postinst_file}" <<EOF
#!/usr/bin/env bash

# -- Link build directory to kernel source for headers.

ln -svf /usr/src/linux-headers-${kernel_version} /lib/modules/${kernel_version}/build
EOF

        chmod 755 "${headers_postinst_file}"

        make headers_install INSTALL_HDR_PATH="${headers_pkg_dir}/usr/src/linux-headers-${kernel_version}"

        fakeroot dpkg-deb -Zxz --build --root-owner-group "${headers_pkg_dir}"

        mv -- *.deb ../

        rm -rf "${headers_pkg_dir}"
    }

    package_kernel
    package_headers

    echo "Packages succesfully built."

    cd -
}

#   ====== START ======

# -- Flag parsing.

if [ "$#" -gt 0 ]; then
    case "$1" in
    --help | -h)
        echo "Usage: $0"
        echo "Compile a custom Linux kernel and package it into a .deb file for CachyOS"
        exit 0
        ;;
    esac
fi


#   ====== START ======

# -- Run the check_deps function and store the result in dep_status.

check_deps


# -- Ask for user confirmation.

whiptail --title "CachyOS Kernel Builder" --msgbox "This is a development version of the CachyOS Kernel Builder. Use at your own risk!." 8 78
whiptail --title "Secure Boot Warning" --yesno "CachyOS Kernel Builder will generate unsigned kernels incompatible with Secure Boot. Do you want to continue?" 8 78


# -- Run main function.

init_script


# -- Main menu.

while true; do
    CHOICE=$(whiptail --title "Kernel Configuration Menu" --menu "Choose an option (use arrows and Enter to navigate)" 25 78 16 \
        "1" "Choose Kernel Configuration" \
        "2" "Configure Base Optimizations" \
        "3" "Configure CPU Scheduler" \
        "4" "Configure LLVM LTO" \
        "5" "Configure Tick Rate" \
        "6" "Configure Tick Type" \
        "7" "Configure NR_CPUS" \
        "8" "Configure Hugepages" \
        "9" "Configure LRU" \
        "10" "Configure Preempt Type" \
        "11" "Configure System Optimizations" \
        "12" "Apply Kernel Configuration and Patches" \
        "13" "Customize Kernel Name" \
        "14" "Show Current Configuration" \
        "15" "Create Debian Packages" \
        "16" "Exit" 3>&1 1>&2 2>&3)

    exitstatus=$?
    if [[ $exitstatus -ne 0 ]]; then
        break
    fi

    case $CHOICE in
        1) kernel_configuration ;;
        2) configure_base_optmizations ;;
        3) configure_cpusched ;;
        4) configure_llvm_lto ;;
        5) configure_tick_rate ;;
        6) configure_tick_type ;;
        7) configure_nr_cpus ;;
        8) configure_hugepages ;;
        9) configure_lru ;;
        10) configure_preempt_type ;;
        11) configure_system_optimizations ;;
        12) apply_kernel_configuration ;;
        13) customize_kernel_extraname ;;
        14) show_options ;;
        15) create_debian_packages ;;
        16 | q) break ;;
        *) echo "Invalid Option" ;;
    esac
done


#   ====== END ======
